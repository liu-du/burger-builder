{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","shared/utility.js","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","value","onChange","changed","elementConfig","options","map","option","key","displayValue","Input","Label","label","module","exports","d","__webpack_exports__","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","Auth","state","isSignup","signupForm","email","type","placeholder","validation","valid","password","inputChangeHandler","event","inputIdentifier","updatedSignupForm","_Users_duliu_code_reactjs_burger_builder_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_this","updatedFormElement","target","setState","submitHandler","preventDefault","onAuth","switchAuthModelHandler","prevState","this","buildingBurger","authRedictPath","onSetAuthRedirectPath","_this2","formElementArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_8__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_13__","isAuth","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","to","authRedirectPath","error","message","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_9__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actionCreators","path"],"mappings":"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","file":"static/js/3.82cea92b.chunk.js","sourcesContent":["import React from \"react\";\nimport classes from \"./Input.css\";\n\nconst input = props => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n          {...props.elementConfig}\n        />\n      );\n      break;\n\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n          {...props.elementConfig}\n        />\n      );\n      break;\n\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n          {...props.elementConfig}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};","export const checkValidity = (value, rules) => {\n  let isValid = true;\n  if (rules.required) {\n    isValid = value.trim() !== \"\" && isValid;\n  }\n  if (rules.minLength) {\n    isValid = value.length >= rules.minLength && isValid;\n  }\n  if (rules.maxLength) {\n    isValid = value.length <= rules.maxLength && isValid;\n  }\n  if (rules.isEmail) {\n    isValid = /^.+@.+$/.test(value) && isValid;\n  }\n  return isValid;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2YUr1\"};","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.css\";\nimport * as actionCreators from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { checkValidity } from \"../../shared/utility\";\n\nclass Auth extends Component {\n  state = {\n    isSignup: false,\n    signupForm: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email Address\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    }\n  };\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedictPath !== \"/\") {\n      this.props.onSetAuthRedirectPath(\"/\");\n    }\n  }\n\n  inputChangeHandler = (event, inputIdentifier) => {\n    const updatedSignupForm = {\n      ...this.state.signupForm\n    };\n    const updatedFormElement = {\n      ...updatedSignupForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.touched = true;\n    updatedSignupForm[inputIdentifier] = updatedFormElement;\n    this.setState({ signupForm: updatedSignupForm });\n  };\n\n  submitHandler = event => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.signupForm.email.value,\n      this.state.signupForm.password.value,\n      this.state.isSignup\n    );\n  };\n\n  switchAuthModelHandler = () => {\n    this.setState(prevState => {\n      return {\n        isSignup: !prevState.isSignup\n      };\n    });\n  };\n\n  render() {\n    const formElementArray = [];\n    for (let key in this.state.signupForm) {\n      formElementArray.push({\n        id: key,\n        config: this.state.signupForm[key]\n      });\n    }\n\n    const form = formElementArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        elementType={formElement.config.elementType}\n        value={formElement.config.value}\n        changed={event => this.inputChangeHandler(event, formElement.id)}\n        elementConfig={formElement.config.elementConfig}\n      />\n    ));\n\n    return this.props.loading ? (\n      <Spinner />\n    ) : (\n      <div className={classes.Auth}>\n        {this.props.isAuth ? (\n          <Redirect to={this.props.authRedirectPath} />\n        ) : null}\n        {this.props.error ? <p>{this.props.error.message}</p> : null}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">\n            {this.state.isSignup ? \"Sign Up\" : \"Sign In\"}\n          </Button>\n        </form>\n        <Button clicked={this.switchAuthModelHandler} btnType=\"Info\">\n          {\"Switch to \" + (this.state.isSignup ? \"Sign In\" : \"Sign Up\")}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuth: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actionCreators.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: path =>\n      dispatch(actionCreators.setAuthRedirectPath(path))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Auth);\n"],"sourceRoot":""}